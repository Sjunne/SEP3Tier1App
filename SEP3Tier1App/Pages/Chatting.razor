@page "/Chatting/{friendUsername}"
@using WebApplication.Data
@using WebApplication.Network
@using SEP3Tier1App.Network
@using SEP3Tier1App.Authentication
@inject ProfileData ProfileData;
@inject INetworkComp _Network;
@inject INetworkSocket _NetworkSocket;
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Chatting</h3>
<div class="col-12 col-lg-7 col-xl-9">
    <div class="py-2 px-4 border-bottom d-none d-lg-block">
        <div class="d-flex align-items-center py-1">
            <div class="position-relative">
                <img src="@friendProfilePic" class="rounded-circle mr-1" alt="@friendUsername" width="40" height="40">
            </div>
            <div class="flex-grow-1 pl-3">

                <div class="text-muted small">
                    <em>Chatting with...</em>
                </div>
                <strong>@friendUsername</strong>
            </div>
            <div>
                <button class="btn btn-primary btn-lg mr-1 px-3">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-phone feather-lg">
                        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                    </svg>
                </button>
                <button class="btn btn-info btn-lg mr-1 px-3 d-none d-md-inline-block">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video feather-lg">
                        <polygon points="23 7 16 12 23 17 23 7"></polygon><rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                    </svg>
                </button>
                <button class="btn btn-light border btn-lg px-3">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-more-horizontal feather-lg">
                        <circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <div class="position-relative">
        <div class="chat-messages p-4">
           @if (messages.Count > 0)
           {
               @for (int j = 0; j < messages.Count; j++)
               {
                   int holder = j;
                   if (messages[holder].usernameFrom.Equals(friendUsername))
                   {
                       <div class="chat-message-left pb-4">
                           <div>
                               <img src="@friendProfilePic" class="rounded-circle mr-1" alt="@friendUsername" width="40" height="40">
                               <div class="text-muted small text-nowrap mt-2">@messages[holder].timeSend</div>
                           </div>
                           <div class="flex-shrink-1 bg-light rounded py-2 px-3 ml-3">
                               <div class="font-weight-bold mb-1">@friendUsername</div>
                               <p> @messages[holder].text</p>
                           </div>
                       </div>
                   }
                   else
                   {
                       <div class="chat-message-right pb-4">
                           <div>
                               <img src="@yourProfilePic" class="rounded-circle mr-1" alt="@yourUsername" width="40" height="40">
                               <div class="text-muted small text-nowrap mt-2">@messages[holder].timeSend</div>
                           </div>
                           <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                               <div class="font-weight-bold mb-1">You</div>
                               @messages[holder].text
                           </div>
                       </div>
                   }
               }
           }
                

        </div>
    </div>

    <div class="flex-grow-0 py-3 px-4 border-top">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Type your message" @bind="BindedWithTextArea">
            <button class="btn btn-primary" @onclick="ShowAndHideFunction">@smileys[0]</button>
            <button class="btn btn-primary" @onclick="SendMessage">Send</button>
        </div>
         <div style="visibility: @ShowAndHide">
                  <br>
                  <div style="border: #0c5460 solid 1px; width: 160px">
                      @for (int i = 0; i < smileys.Count; i++)
                      {
                          int holder = i;
                          <a @onclick="@(() => AddSmiley(smileys[holder]))"> @smileys[holder]</a>
                      }
                  </div>
              </div>

    </div>
    
  
     

</div>

@code {
    [Parameter]
    public string friendUsername { get; set; }

    private string yourUsername;
    private IList<PrivateMessage> messages = new List<PrivateMessage>();
    private string friendProfilePic;
    private string yourProfilePic;
    private string BindedWithTextArea;
    private Delegating _delegate;



    private string ShowAndHide = "hidden";

    IList<string> smileys = new List<string>();
    
    


    protected override Task OnInitializedAsync()
    {
        if (CustomAuthenticationStateProvider.getCachedUser() == null || ProfileData.username == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            yourUsername = ProfileData.username;

            setDelegates();
            FillInInformation();
            fillDictionary();
            return base.OnInitializedAsync();
        }
        return base.OnInitializedAsync();
    }

    private async void setDelegates()
    {
        Console.WriteLine("jeg s√¶tter delegates");
        _delegate = _NetworkSocket.getDelegating();
        _delegate.NotfifyAboutNewMessage = GetAllMessageAgain;
    
    }

    private async void GetAllMessageAgain()
    {
        Console.WriteLine("jeg kom herind");
        messages = await _Network.getAllPrivateMessages(yourUsername, friendUsername);
        await InvokeAsync(StateHasChanged);
    }

    private async void FillInInformation()
    {
        friendProfilePic = await _Network.GetProfilePicture(friendUsername);
        yourProfilePic = await _Network.GetProfilePicture(yourUsername);
        messages = await _Network.getAllPrivateMessages(yourUsername, friendUsername);
        Console.WriteLine(messages[0].text);
        StateHasChanged();
    }


    private void AddSmiley(string SmileyString)
    {
        BindedWithTextArea += SmileyString;
        StateHasChanged();
    }


    private void ShowAndHideFunction()
    {
        if(ShowAndHide.Equals("hidden"))
        ShowAndHide = "visible";
        else
        {
            ShowAndHide = "hidden";
        }
    }
    

    public void fillDictionary()
    {    
        smileys.Add(char.ConvertFromUtf32(0x1F600));
        smileys.Add(char.ConvertFromUtf32(0x1F601));
        smileys.Add(char.ConvertFromUtf32(0x1F602));
        smileys.Add(char.ConvertFromUtf32(0x1F603));
        smileys.Add(char.ConvertFromUtf32(0x1F604));
        smileys.Add(char.ConvertFromUtf32(0x1F60D));
        smileys.Add(char.ConvertFromUtf32(0x1F605));
        smileys.Add(char.ConvertFromUtf32(0x1F606));
        smileys.Add(char.ConvertFromUtf32(0x1F607));
        smileys.Add(char.ConvertFromUtf32(0x1F608));
        smileys.Add(char.ConvertFromUtf32(0x1F609));
        smileys.Add(char.ConvertFromUtf32(0x1F60A));
        smileys.Add(char.ConvertFromUtf32(0x1F60B));
        smileys.Add(char.ConvertFromUtf32(0x1F60C));
        smileys.Add(char.ConvertFromUtf32(0x1F60E));
        smileys.Add(char.ConvertFromUtf32(0x1F60F));
        smileys.Add(char.ConvertFromUtf32(0x1F610));
        smileys.Add(char.ConvertFromUtf32(0x1F611));
    }

    private async void SendMessage()
    {
        string text = BindedWithTextArea;

        PrivateMessage message = new PrivateMessage()
        {
            text = text,
            usernameFrom = yourUsername,
            usernameTo = friendUsername
        };

        _NetworkSocket.SendMessage(message);
        messages = await _Network.getAllPrivateMessages(yourUsername, friendUsername);
        
        StateHasChanged();
    }

}