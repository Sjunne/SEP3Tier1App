@page "/Connections"
@using WebApplication.Data
@using WebApplication.Network
@using SEP3Tier1App.Network
@using System.Text.Json
@using SEP3Tier1App.Authentication
@inject INetworkComp Network;
@inject INetworkSocket NetworkSocket;
@inject NavigationManager Manager;
@inject AuthenticationStateProvider CustomAuthenticationStateProvider
@inject ProfileData ProfileData


<h3>Connections</h3>


<div class="container" style="width: 100%">
    <div class="top">
        <h2>Connections</h2>
    </div>
    <div class="row" style="width: 100%">

        <div class="shadow" style="width: 100%">
            @for (int i = 0; i < allConnections.Count; i++)
            {
                int holder = i;
                <div class="col-sm-12">
                    <div class="col-sm-2" style="float: left">
                        <img src="@Images[holder]" class="img-circle" width="60px">
                    </div>
                    <div class="col-sm-8" style="float: left">
                        <h4>
                            <a href="#">@allConnections[holder].Username</a>
                        </h4>
                        <p>
                            <a >@allConnections[holder].connectionAge</a>
                        </p>
                    </div>
                    <div class="col-sm-2" style="float: left">
                        <br>
                        <a  @onclick="@(() => OpenChatting(allConnections[holder].Username))" href="" class="myButton">Chat</a>
                    </div>
                </div>
                <div class="clearfix"></div>
                <hr/>
            }

        </div>
    </div>
</div>


@code {
    private IList<Connections> allConnections = new List<Connections>();
    private IList<string> Images = new List<string>();
    
    private string Username { get; set; }
    private Delegating _delegate;

    private bool onceOnly;


    protected override Task OnInitializedAsync()
    {
        Console.WriteLine(((CustomAuthenticationStateProvider) CustomAuthenticationStateProvider).getCachedUser() );

        if (((CustomAuthenticationStateProvider) CustomAuthenticationStateProvider).getCachedUser() == null || ProfileData.username == null)
        {
            Manager.NavigateTo("/");
        }
        else
        {

            setDelegates();

            return base.OnInitializedAsync();
        }
        return base.OnInitializedAsync();

    }

    private  void ReactToNetwork(Request obj)
    {
        allConnections = JsonSerializer.Deserialize<IList<Connections>>(obj.o.ToString());
    }

    private async void setDelegates()
    {
        onceOnly = true;
        _delegate = NetworkSocket.getDelegating();
        _delegate.GetConnectionsFromNetwork = ReactToNetwork;
        _delegate.ImagesFromNetwork = ReactToNetWorkSetImages;
    
        await NetworkSocket.getConnections(Username);
    }

    private async void ReactToNetWorkSetImages(IList<string> obj)
    {
        Images = obj;
        await InvokeAsync(StateHasChanged);
    }

    private void OpenChatting(string username)
    {
        Manager.NavigateTo($"/Chatting/{username}");
    }

}