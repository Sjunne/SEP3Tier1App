@page "/Editpreference"
@using WebApplication.Data
@using WebApplication.Network
@using System.Diagnostics.Eventing.Reader
@using System.Text.Json
@using SEP3Tier1App.Authentication
@using SEP3Tier1App.CustomAttributes
@inject ProfileData ProfileData
@inject INetworkComp Network
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
<h1>Edit preferences.</h1>
<link rel="stylesheet" href="prefstyle.css">
@if (showEducationErrorLabel)
{
    <label id="education" class="errormessagelabel">Education: Cannot be over 300 Characters</label>
    <br/>
}
@if (showCityErrorLabel)
{
    <label id="city" class="errormessagelabel">City: Cannot be over 300 Characters</label>
    <br/>
}
@if (showHobbiesErrorLabel)
{
    <label id="hobbies" class="errormessagelabel">Hobbies: Cannot be over 300 Characters</label>
    <br/>

}
@if (showHairColorErrorLabel)
{
    <label id="haircolor" class="errormessagelabel">Hair Color: Cannot be over 300 Characters</label>
    <br/>
}
@if (showEyeColorErrorLabel)
{
    <label id="eyecolor" class="errormessagelabel">Eye Color: Cannot be over 300 Characters</label>
    <br/>
}
@if (showSkinColorErrorLabel)
{
    <label id="skincolor" class="errormessagelabel">Skin Color: Cannot be over 300 Characters</label>
    <br/>
}
@if (showNationalityErrorLabel)
{
    <label id="nationality" class="errormessagelabel">Nationality: Cannot be over 300 Characters</label>
    <br/>
}
@if (showBodyshapeErrorLabel)
{
    <label id="bodyshape" class="errormessagelabel">Bodyshape: Cannot be over 300 Characters</label>
    <br/>
}
@if (showJobErrorLabel)
{
    <label id="Job" class="errormessagelabel">Job: Cannot be over 300 Characters</label>
    <br/>
}


<EditForm Model="ProfileData.preferences" OnValidSubmit="@ConfirmData">
<DataAnnotationsValidator />
<ValidationSummary />
<label>Maximum Age</label>
<InputNumber class="form-control" placeholder="MaxAge" @bind-Value="@ProfileData.preferences.maximumAge"/>
<label>Minimum Age</label>
<InputNumber class="form-control" placeholder="MinAge" @bind-Value="@ProfileData.preferences.minimumAge"/>
<div>
    <label>Education</label><br>
    <label style="font-size: xx-small">Please separate each item with a comma</label>
    <InputText class="form-control" placeholder="Education" @bind-Value="@ProfileData.preferences.education"/>
</div>
<div>
    <label>City</label><br>
    <label style="font-size: xx-small">Please separate each item with a comma</label>
    <InputText class="form-control" placeholder="City" @bind-Value="@ProfileData.preferences.city"/>

</div>
<div>
    <label>Hobbies</label><br>
    <label style="font-size: xx-small">Please separate each item with a comma</label>
    <InputText class="form-control" placeholder="Hobbies" @bind-Value="@ProfileData.preferences.hobbies"/>
  
</div>
<div>
    <label>Hair Colors</label><br>
    <label style="font-size: xx-small">Please separate each item with a comma</label>
    <InputText class="form-control" placeholder="HairColor" @bind-Value="@ProfileData.preferences.hairColor"/>
   
</div>
<div>
    <label>Eye Colors</label><br>
    <label style="font-size: xx-small">Please separate each item with a comma</label>
    <InputText class="form-control" placeholder="EyeColor" @bind-Value="@ProfileData.preferences.eyeColor"/>

</div>
<div>
    <label>Skin Colors</label><br>
    <label style="font-size: xx-small">Please separate each item with a comma</label>
    <InputText class="form-control" placeholder="SkinColor" @bind-Value="@ProfileData.preferences.skinColor"/>
</div>
<div>
    <label>Nationalities</label><br>
    <label style="font-size: xx-small">Please separate each item with a comma</label>
    <InputText class="form-control" placeholder="Nationality" @bind-Value="@ProfileData.preferences.nationality"/>
</div>
<div>
    <label>Bodyshape</label><br>
    <label style="font-size: xx-small">Please separate each item with a comma</label>
    <InputText class="form-control" placeholder="BodyShape" @bind-Value="@ProfileData.preferences.bodyShape"/>
</div>
<div>
    <label>Jobs</label><br>
    <label style="font-size: xx-small">Please separate each item with a comma</label>
    <InputText class="form-control" placeholder="Job" @bind-Value="@ProfileData.preferences.job"/>
</div>
<div>
    <label>Genders</label>
    <InputText class="form-control" placeholder="Gender" @bind-Value="@ProfileData.preferences.gender"/>
</div>

<div>
    <label>Do you want them to have kids?</label>
    <input type="checkbox" @bind="@ProfileData.preferences.kids"/>
</div>
<div>
    <label>Seeks Relationship</label>
    <input type="checkbox" @bind="@ProfileData.preferences.lookingFor"/>
</div>


<button>
    <i class="oi oi-submit" style="color:red"/>
    Submit</button>
</EditForm>

@code {

    private EditContext editContext;
    private Boolean showEducationErrorLabel = false;
    private Boolean showCityErrorLabel = false;
    private Boolean showHobbiesErrorLabel = false;
    private Boolean showHairColorErrorLabel = false;
    private Boolean showEyeColorErrorLabel = false;
    private Boolean showSkinColorErrorLabel = false;
    private Boolean showNationalityErrorLabel = false;
    private Boolean showBodyshapeErrorLabel = false;
    private Boolean showJobErrorLabel = false;

    protected override async Task OnInitializedAsync()
    {
        if (CustomAuthenticationStateProvider.getCachedUser() == null || ProfileData.username == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            try
            {
                ProfileData = await Network.GetPreference(ProfileData.username);
                ProfileData.preferences = JsonSerializer.Deserialize<Details>(ProfileData.jsonPref);
                editContext = new EditContext(ProfileData.preferences);
                Console.WriteLine(ProfileData.username);
            }catch (Exception e)
            {
                NavigationManager.NavigateTo($"/Error/{e.Message}");
            }
        }
        

    }

    public void ConfirmData()
    {
        Boolean isValid = editContext.Validate();
        if (ProfileData.preferences.maximumAge < ProfileData.preferences.minimumAge)
        {
            int maxAgeTemp = ProfileData.preferences.maximumAge;
            ProfileData.preferences.maximumAge=ProfileData.preferences.minimumAge;
            ProfileData.preferences.minimumAge = maxAgeTemp;
        }

        if (isValid)
        {
            ProfileData.username = CustomAuthenticationStateProvider.getCachedUser().username;
            Network.EditPreference(ProfileData);
        }
       
    }
    
}