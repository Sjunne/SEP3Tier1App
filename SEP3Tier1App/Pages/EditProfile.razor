@page "/EditProfile"
@using WebApplication.Data
@using WebApplication.Network
@using System.Text.RegularExpressions
@using System.Text.Json
@using SEP3Tier1App.Authentication
@inject ProfileData ProfileData
@inject Details Details
@inject INetworkComp Network
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider CustomAuthenticationStateProvider

<h1>Edit Profile</h1>
<link rel="stylesheet" href="prefstyle.css">

<EditForm Model="ProfileData" OnValidSubmit="@ConfirmData">

    <ObjectGraphDataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="row">
        <div class="col-md-6 " >
            <label>First Name</label>
            <InputText class="form-control" placeholder="FirstName" @bind-Value="@ProfileData.firstName"/>
            <label>Last Name</label>
            <InputText class="form-control" placeholder="LastName" @bind-Value="@ProfileData.lastName"/>

            <label>Age</label>
            <InputNumber class="form-control" placeholder="Age" @bind-Value="@ProfileData.age"/>
            <label>Education</label>
            <InputText class="form-control" placeholder="Education" @bind-Value="@ProfileData.education"/>
            <label>City</label>
            <InputText class="form-control" placeholder="City" @bind-Value="@ProfileData.city"/>
            <div>
                <label>Hobbies</label><br>
                <label style="font-size: xx-small">Please separate each item with a comma</label>
                <InputText class="form-control" placeholder="Hobbies" @bind-Value="@ProfileData.self.hobbies"/>
            </div>
            <label>Hair Color</label>
            <InputText class="form-control" placeholder="HairColor" @bind-Value="@ProfileData.self.hairColor"/>
        </div>
        <div class="col-md-6">
            <label>Eye Color</label>
            <InputText class="form-control" placeholder="EyeColor" @bind-Value="@ProfileData.self.eyeColor"/>
            <label>Skin Color</label>
            <InputText class="form-control" placeholder="SkinColor" @bind-Value="@ProfileData.self.skinColor"/>
            <label>Nationality</label>
            <InputText class="form-control" placeholder="Nationality" @bind-Value="@ProfileData.self.nationality"/>
            <label>Body Shape</label>
            <InputText class="form-control" placeholder="BodyShape" @bind-Value="@ProfileData.self.bodyShape"/>
            <label>Job</label>
            <InputText class="form-control" placeholder="Job" @bind-Value="@ProfileData.self.job"/>
            <label>Gender</label>
            <InputText class="form-control" placeholder="Gender" @bind-Value="@ProfileData.self.gender"/>
            <div>
                <label>Do you have kids?</label>
                <input type="checkbox" @bind="@ProfileData.self.kids"/>
            </div>
            <div>
                <label>Seeks Relationship</label>
                <input type="checkbox" @bind="@ProfileData.self.lookingFor"/>
            </div>
        </div>
        <button class="btn btn-primary Georgia" @onclick="Refresh">
            <i class="oi oi-submit" style="color:red"/>
            Submit
        </button>
    </div>
</EditForm>


@code {
    private Boolean ShowPopup = false;
    private EditContext editContext;
    private Boolean isValid;
    private Boolean showErrorLabel = false;

    protected override async Task OnInitializedAsync()
    {
        if (((CustomAuthenticationStateProvider) CustomAuthenticationStateProvider).getCachedUser() == null || ProfileData.username == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            try
            {
                ProfileData = await Network.GetProfile(ProfileData.username);
                ProfileData.self = JsonSerializer.Deserialize<Details>(ProfileData.jsonSelf);
                ProfileData.self.maximumAge = 18;
                ProfileData.self.minimumAge = 18;
                ProfileData.preferences.minimumAge = 18;
                ProfileData.preferences.maximumAge = 18;
                editContext = new EditContext(ProfileData);
            }
            catch (Exception e)
            {
                NavigationManager.NavigateTo($"/Error/{e.Message}");
            }
        }
    }


    public string fixWhiteSpace(string hej)
    {
        string stringToBeFixed = "\"" + hej + "\"";
        return stringToBeFixed;
    }

    public void ConfirmData()
    {
        if (ProfileData.self.hobbies != null)
        {
        }

        isValid = editContext.Validate();
        if (isValid)
        {
            ProfileData.username = ProfileData.username = ((CustomAuthenticationStateProvider) CustomAuthenticationStateProvider).getCachedUser().username;
            ;
            ProfileData.firstName = fixWhiteSpace(ProfileData.firstName);
            ProfileData.lastName = fixWhiteSpace(ProfileData.lastName);
            ProfileData.education = fixWhiteSpace(ProfileData.education);
            ProfileData.city = fixWhiteSpace(ProfileData.city);
            ProfileData.intro = fixWhiteSpace(ProfileData.intro);
            ProfileData.instagram = fixWhiteSpace(ProfileData.instagram);
            ProfileData.spotify = fixWhiteSpace(ProfileData.spotify);
            ProfileData.idealdate = fixWhiteSpace(ProfileData.idealdate);
            ProfileData.interests = fixWhiteSpace(ProfileData.interests);

            ProfileData.username = ((CustomAuthenticationStateProvider) CustomAuthenticationStateProvider).getCachedUser().username;
            Network.bigEditProfile(ProfileData);
        }
        else
        {
            editContext.GetValidationMessages();
        }
    }

    public void cleanup()
    {
        ProfileData.self.hobbies = new String(ProfileData.self.hobbies.Where(c => c != '-' && (c < '0' || c > '9')).ToArray());
        ProfileData.self.hobbies = Regex.Replace((string) ProfileData.self.hobbies, @", ,", ",");
    }


    private void Refresh()
    {
        NavigationManager.NavigateTo("/Settings");
        
    }

}