@page "/Profile"
@using WebApplication.Data
@using WebApplication.Network
@using SEP3Tier1App.Components
@using Blazored.Modal.Services
@using System.Net.Mime
@using System.IO
@using BlazorInputFile
@inject IModalService Modal
@inject ProfileData ProfileData
@inject INetworkComp Network;

<head>
    <style>
        body {
        background-color: #1b1e21;
        }
    </style>
</head>
<div style="width: 100%; height: 400px; background: rgb(2,0,36);
                                                                         background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(9,9,121,1) 35%, rgba(0,212,255,1) 100%);">
    <div id="example1" class="cover-div" style="height: 220px; position: relative; padding: 0;">
        <img src="@filepath" style="height: 100%; width:100%; display: block; border: 0;margin: 0;padding: 0;" alt=""/>
        <div id="example2"></div>
    </div>

    

    <div id="top">
        <h2 class="Georgia">Maria Frandsen</h2>

    </div>
</div>

<div style="width: 75%; margin: auto; background-color: white;">
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="About">
                <div style="height: 300px">
                    <div style="float:left; width: 40%; height: 250px; border-style: solid; margin-left: 7%; overflow: scroll;">

                            <h5 class="Georgia" style="float: left">About Maria</h5>
                            
                            @if (!ProfileData.isEditingAbout)
                            {
                                <button class="btn btn-primary Georgia" type="submit" @onclick="Edit" style="float: right">Edit</button>
                                <div style="float: left">
                                    <p class="Georgia">Age: @ProfileData.age</p>
                                    <p class="Georgia">Interests: @ProfileData.interests</p>
                                    <p class="Georgia">Ideal date: @ProfileData.idealdate</p>
                                    <p class="Georgia">Instagram: @ProfileData.instragram</p>
                                    <p class="Georgia">Spotify: @ProfileData.spotify</p>
                                </div>

                            }
                            else
                            {
                                <button class="btn btn-primary Georgia" type="submit" @onclick="EditAbout" style="float: right">Save</button>
                                <p/>
                                <input type="text" class="form-control" placeholder="Age" @bind="@ProfileData.age"/>
                                <input type="text" class="form-control" placeholder="Interests" @bind="@ProfileData.interests"/>
                                <input type="text" class="form-control" placeholder="Ideal Date" @bind="@ProfileData.idealdate"/>
                                <input type="text" class="form-control" placeholder="Instragam" @bind="@ProfileData.spotify"/>
                                <input type="text" class="form-control" placeholder="Spotify" @bind="@ProfileData.instragram"/>
                            }
                       

                    </div>
                    
                    
                    <div style=" overflow: scroll; float:right; width: 40%; height: 250px; border-style: solid; margin-right: 7%; margin-bottom: 50px;">
                            <h5 class="Georgia" style="float: left">Introduction </h5>
                            
                            @if (!ProfileData.isEditingIntro)
                            {
                                <button class="btn btn-primary Georgia" type="submit" @onclick="EditIntro" style="float: right">Edit</button>
                                <p class="Georgia" style="float: left">
                                    @ProfileData.intro
                                </p>
                            }
                            else
                            {
                                <button lass="btn btn-primary Georgia" type="submit" @onclick="EditIntroduction" style="float: right">Save</button>
                                <br/>
                                <EditForm Model="@ProfileData" OnValidSubmit="Here">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <br/>
                                    <InputTextArea style="margin-left: 5px; width: 250px; height: 150px" @bind-Value="ProfileData.intro"/>

                                </EditForm>
                            }
                       
                    </div>
                </div>

            </RadzenTabsItem>
            <RadzenTabsItem Text="Images">
                <div style="height: 300px">
                    <InputFile OnChange="HandleSelection"/>
                    <br/>
                    @for(int i = 0; i < Images.Count-1;i++)
                    {
                        <div class="gallery">
                            <a target="_blank" href="@Images[i]">
                                <img src="@Images[i]" alt="@i" width="600px" height="400px"/>
                            </a>
                            <div class="desc">Description</div>
                            
                        </div>
                    }
                </div>

            </RadzenTabsItem>
            <RadzenTabsItem Text="Reviews">
                <div style="height: 300px"></div>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>

@code {
    //comment siden
    //fjern inline style


    private string filepath;
    private string dataUri;
    private IList<string> Images = new List<string>();
    

    private string username = "Maria";
    protected override async Task OnInitializedAsync()
    {
        ProfileData = await Network.GetProfile(username);
        ProfileData.isEditingAbout = false;
        filepath = await Network.GetFilePath(username);

        Images = await Network.GetPictures(username);
    }

    private void Here()
    {
    }

    private void Edit()
    {
        ProfileData.isEditingAbout = !ProfileData.isEditingAbout;
    }

    private void EditIntro()
    {
        ProfileData.isEditingIntro = !ProfileData.isEditingIntro;
    }

    public async Task EditIntroduction()
    {
        EditIntro();
    //Ned i tier2 -- TODO: SKAL ÆNDRE USERNAME
        ProfileData.username = username;
        await Network.EditIntroduction(ProfileData);
    }
    
    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            IFileListEntry image = await file.ToImageFileAsync(file.Type, 512, 512);
            var ms = new MemoryStream();
            await image.Data.CopyToAsync(ms);
            
            dataUri = $"data:{file.Type};base64,{Convert.ToBase64String(ms.ToArray())}";
            await Network.UploadPicture(username, dataUri);
            
        }
    }

    private async Task EditAbout()
    {
    //brug for at bruge den samme metode altid med et request objekt,
    //så det kun er enum som er forskellige når man opdater profiledata
        Edit();
        ProfileData.username = username;
   
        await Network.EditProfile(ProfileData, RequestOperationEnum.EDITABOUT);

    }

}